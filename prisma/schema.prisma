datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Answer {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  email              String  @unique
  firstName          String
  lastName           String
  presence           String
  plusOneFirstName   String?
  plusOneLastName    String?
  dietaryRestriction String?
  message            String?
  dateTime           String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createdAt DateTime
  width     Int
  height    Int
  userId    String
  size      Int?
  tags      String[]  @default([])
  focal     String?
  camera    String?
  iso       Int?
  aperture  Float?
  shutter   String?
  lens      String?
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  photoId   String
  userId    String
  createdAt DateTime
  body      String
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
}
